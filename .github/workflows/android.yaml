name: "publish android"

on:
  workflow_dispatch:
  push:
    branches:
      - release

env:
  APP_NAME: "Moosync"

jobs:
  build-android:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: aarch64
            rust_triple: aarch64-linux-android
          - target: armv7
            rust_triple: armv7-linux-androideabi
          - target: x86_64
            rust_triple: x86_64-linux-android
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev gir1.2-javascriptcoregtk-4.1 libgtk-3-dev libunwind-dev libappindicator3-dev librsvg2-dev patchelf alsa-tools libasound2-dev libudev-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio libglib2.0-dev libgtk-3-dev
          version: 1.0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          # Path where NDK version 29.0.13599879 is expected to be installed by setup-android
          path: /usr/local/lib/android/sdk/ndk/29.0.13599879
          key: ndk-${{ runner.os }}-29.0.13599879

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: 12266719 # v16

      - name: Install NDK
        run: sdkmanager "ndk;29.0.13599879"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_triple }} wasm32-unknown-unknown

      - name: Install trunk
        uses: baptiste0928/cargo-install@v3
        with:
          crate: trunk

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true
          workspaces: |
            . -> target
          key: rust-${{ matrix.rust_triple }}

      - name: Install tauri-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: tauri-cli
          version: "^2.0.0"

      - name: Install bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: bindgen-cli

      - name: setup Android signing
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties
          echo "Keystore properties created."
          cd ../../.. # Go back to root

      - name: Build android bundle
        run: cargo tauri android build --target ${{ matrix.target }}
        env:
          NDK_HOME: /usr/local/lib/android/sdk/ndk/29.0.13599879
          ANDROID_HOME: /usr/local/lib/android/sdk
          CMAKE_ANDROID_NDK: /usr/local/lib/android/sdk/ndk/29.0.13599879
          ANDROID_NDK: /usr/local/lib/android/sdk/ndk/29.0.13599879
          RANLIB: /usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib
          BINDGEN_EXTRA_CLANG_ARGS_armv7_linux_androideabi: "--sysroot=/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/arm-linux-androideabi"
          BINDGEN_EXTRA_CLANG_ARGS_i686_linux_android: "--sysroot=/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/i686-linux-android"
          BINDGEN_EXTRA_CLANG_ARGS_x86_64_linux_android: "--sysroot=/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include -I/usr/local/lib/android/sdk/ndk/29.0.13599879/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/x86_64-linux-android"

      - name: Get Tauri App Version
        id: app-version
        run: |
          TAURI_CONF_PATH="src-tauri/tauri.conf.json"
          echo "Attempting to read version from $TAURI_CONF_PATH"

          if [ ! -f "$TAURI_CONF_PATH" ]; then
            echo "Error: $TAURI_CONF_PATH not found."
            exit 1
          fi

          VERSION_STRING=$(jq -r '.version' "$TAURI_CONF_PATH")

          echo "Extracted version_string: '$VERSION_STRING'" # Debug output

          if [ -z "$VERSION_STRING" ] || [ "$VERSION_STRING" = "null" ]; then
            echo "Error: Version not found or is invalid in $TAURI_CONF_PATH."
            echo "Please ensure $TAURI_CONF_PATH contains a valid 'version' field."
            exit 1
          fi

          echo "Successfully extracted version: $VERSION_STRING"
          echo "version_string=$VERSION_STRING" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Rename APK file
        run: |
          mv ./src-tauri/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk ./src-tauri/gen/android/app/build/outputs/apk/universal/release/${{env.APP_NAME}}-${{ matrix.target }}-${{ steps.app-version.outputs.version_string }}.apk

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.target }}
          path: ./src-tauri/gen/android/app/build/outputs/apk/universal/release/${{env.APP_NAME}}-${{ matrix.target }}-${{ steps.app-version.outputs.version_string }}.apk

  generate-latest-android-json:
    needs: build-android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: apk-*
          merge-multiple: true
          path: ./apks

      - name: Ensure jq is installed
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Generate signatures and latest-android.json
        id: generate-json
        run: |
          set -e
          VERSION=$(jq -r '.version' src-tauri/tauri.conf.json)
          NOTES="See the assets to download this version and install."
          PUB_DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

          # Map targets to platform keys
          declare -A PLATFORM_KEYS
          PLATFORM_KEYS[aarch64]="android-aarch64"
          PLATFORM_KEYS[armv7]="android-armv7"
          PLATFORM_KEYS[x86_64]="android-x86_64"

          # Prepare platforms JSON
          PLATFORMS_JSON="{"
          SEP=""

          for apk in ./apks/*.apk; do
            filename=$(basename "$apk")
            # Extract target from filename: Moosync-aarch64-11.0.2.apk
            target=$(echo "$filename" | sed -E 's/^.*-([a-z0-9_]+)-[0-9]+\.[0-9]+\.[0-9]+\.apk$/\1/')
            platform_key="${PLATFORM_KEYS[$target]}"
            # Fallback if not mapped
            if [ -z "$platform_key" ]; then
              platform_key="$target"
            fi
            # Calculate signature (sha256)
            signature=$(sha256sum "$apk" | awk '{print $1}')
            # Construct download URL (update this if your release URL changes)
            url="https://github.com/Moosync/Moosync/releases/download/Moosync-v${VERSION}/${filename}"
            # Append to JSON
            PLATFORMS_JSON="${PLATFORMS_JSON}${SEP}\"${platform_key}\": {\"signature\": \"${signature}\", \"url\": \"${url}\"}"
            SEP=","
          done

          PLATFORMS_JSON="${PLATFORMS_JSON}}"

          cat > latest-android.json <<EOF
          {
            "version": "${VERSION}",
            "notes": "${NOTES}",
            "pub_date": "${PUB_DATE}",
            "platforms": ${PLATFORMS_JSON}
          }
          EOF

          echo "latest-android.json generated:"
          cat latest-android.json

      - name: Upload latest-android.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: latest-android-json
          path: latest-android.json

      - name: Publish APKs and latest-android.json
        uses: softprops/action-gh-release@v2
        with:
          name: Moosync v${{ steps.generate-json.outputs.version_string }}
          tag_name: Moosync-v${{ steps.generate-json.outputs.version_string }}
          body: "See the assets to download this version and install."
          draft: true
          prerelease: true
          files: |
            ./apks/*.apk
            latest-android.json

