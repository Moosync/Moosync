name: "build"

on:
  workflow_dispatch:
    inputs:
      os:
        description: Select OS
        type: choice
        options:
          - '[{"platform": "ubuntu-22.04", "args": ""}]'
          - '[{"platform": "ubuntu-22.04-arm", "args": ""}]'
          - '[{"platform": "windows-latest", "args": ""}]'
          - '[{"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}]'
          - '[{"platform": "macos-13", "args": "--target x86_64-apple-darwin"}]'
          - '[{"platform": "ubuntu-22.04", "args": ""}, {"platform": "ubuntu-22.04-arm", "args": ""}, {"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}, {"platform": "macos-13", "args": "--target x86_64-apple-darwin"}, {"platform": "windows-latest", "args": ""}]'
        default: '[{"platform": "ubuntu-22.04", "args": ""}, {"platform": "macos-latest", "args": "--target aarch64-apple-darwin"}, {"platform": "macos-13", "args": "--target x86_64-apple-darwin"}, {"platform": "windows-latest", "args": ""}]'
        required: true
      publish:
        description: Publish release?
        type: boolean
        default: false
        required: true
  push:
    branches:
      - release

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(inputs.os) }}

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' || matrix.platform == 'ubuntu-22.04-arm'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libwebkit2gtk-4.1-dev gir1.2-javascriptcoregtk-4.1 libgtk-3-dev libunwind-dev libappindicator3-dev librsvg2-dev patchelf alsa-tools libasound2-dev libudev-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
          version: 1.0

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04-arm'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl libwebkit2gtk-4.1-dev build-essential libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libfuse2 file gstreamer1.0-pulseaudio libunwind-dev alsa-tools libasound2-dev libudev-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio xdg-utils

      - name: install dependencies (macos only)
        if: matrix.platform == 'macos-latest'
        run: |
          brew update
          brew upgrade
          brew install openssl@3

      # https://github.com/sfackler/rust-openssl/blob/master/.github/workflows/ci.yml#L94
      - name: Install vcpkg (Windows only)
        run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        if: matrix.platform == 'windows-latest'

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        if: matrix.platform == 'windows-latest'
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Install OpenSSL (Windows only)
        run: vcpkg install openssl:x64-windows-static-md
        if: matrix.platform == 'windows-latest'
        env:
          VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin,wasm32-unknown-unknown' || 'wasm32-unknown-unknown' }}

      # - uses: jetli/trunk-action@v0.5.0
      #   with:
      #     # Optional version of trunk to install(eg. 'v0.19.1', 'latest')
      #     version: "latest"
      #
      - name: Install trunk
        uses: baptiste0928/cargo-install@v3
        with:
          crate: trunk

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          cache-all-crates: true
          workspaces: |
            . -> target

      - name: Current PWD
        run: pwd

      - name: Install tauri CLI
        run: npm install -g @tauri-apps/cli@latest

      - name: Build Tauri app (no publish)
        if: ${{ !inputs.publish }}
        uses: tauri-apps/tauri-action@v0
        with:
          args: ${{ matrix.args }}
          tauriScript: tauri
          projectPath: "."

      - name: Publish Tauri release
        if: ${{ inputs.publish }}
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: Moosync-v__VERSION__ # the action automatically replaces __VERSION__ with the app version.
          releaseName: "Moosync v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}
          tauriScript: tauri
          projectPath: "."

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: moosync-build-${{ matrix.platform }}
          path: |
            target/**/latest.json
            target/**/*.rpm
            target/**/*.AppImage
            target/**/*.AppImage.sig
            target/**/*.dmg
            target/**/*.deb
            target/**/*-setup.exe
            target/**/*-setup.exe.sig
            target/**/*_en-US.msi
            target/**/*_en-US.msi.sig
            target/**/*.app.tar.gz
            target/**/*.app.tar.gz.sig
