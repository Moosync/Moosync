{
  "moosync": [
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "window_handler"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "export_playlist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "Vec<types::songs::Song>",
          "name": "songs"
        }
      ],
      "name": "insert_songs",
      "ret": "types::errors::Result<Vec<types::songs::Song>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "Vec<String>",
          "name": "songs"
        }
      ],
      "name": "remove_songs",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::songs::QueryableSong",
          "name": "a"
        }
      ],
      "name": "update_song",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::songs::GetSongOptions",
          "name": "options"
        }
      ],
      "name": "get_songs_by_options",
      "ret": "types::errors::Result<Vec<types::songs::Song>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::entities::GetEntityOptions",
          "name": "options"
        }
      ],
      "name": "get_entity_by_options",
      "ret": "types::errors::Result<serde_json::Value>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "term"
        }
      ],
      "name": "search_all",
      "ret": "types::errors::Result<types::entities::SearchResult>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::entities::QueryablePlaylist",
          "name": "playlist"
        }
      ],
      "name": "create_playlist",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "Vec<types::songs::Song>",
          "name": "songs"
        }
      ],
      "name": "add_to_playlist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "playlist_id"
        },
        {
          "arg_type": "String",
          "name": "song_id"
        }
      ],
      "name": "is_song_in_playlist",
      "ret": "types::errors::Result<bool>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "Vec<String>",
          "name": "songs"
        }
      ],
      "name": "remove_from_playlist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "remove_playlist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::entities::QueryableAlbum",
          "name": "album"
        }
      ],
      "name": "update_album",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::entities::QueryableArtist",
          "name": "artist"
        }
      ],
      "name": "update_artist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "types::entities::QueryablePlaylist",
          "name": "playlist"
        }
      ],
      "name": "update_playlist",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "Vec<types::songs::Song>",
          "name": "songs"
        }
      ],
      "name": "update_songs",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "String",
          "name": "lyrics"
        }
      ],
      "name": "update_lyrics",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "increment_play_count",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "f64",
          "name": "duration"
        }
      ],
      "name": "increment_play_time",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<database::database::Database>",
          "name": "db"
        }
      ],
      "name": "get_top_listened_songs",
      "ret": "types::errors::Result<types::songs::AllAnalytics>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_extension_manifest",
      "ret": "types::errors::Result<Vec<types::ui::extensions::FetchedExtensionManifest>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "ext_path"
        }
      ],
      "name": "install_extension",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "ext_path"
        }
      ],
      "name": "remove_extension",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "types::ui::extensions::FetchedExtensionManifest",
          "name": "fetched_ext"
        }
      ],
      "name": "download_extension",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        }
      ],
      "name": "get_installed_extensions",
      "ret": "types::errors::Result<Vec<types::ui::extensions::ExtensionDetail>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "types::ui::extensions::ExtensionExtraEventArgs",
          "name": "args"
        }
      ],
      "name": "send_extra_event",
      "ret": "types::errors::Result<serde_json::Value>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<extensions::ExtensionHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "types::ui::extensions::PackageNameArgs",
          "name": "args"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_extension_icon",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        }
      ],
      "name": "is_initialized",
      "ret": "types::errors::Result<bool>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        }
      ],
      "name": "librespot_play",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        }
      ],
      "name": "librespot_pause",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        }
      ],
      "name": "librespot_close",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "uri"
        },
        {
          "arg_type": "bool",
          "name": "autoplay"
        }
      ],
      "name": "librespot_load",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "u32",
          "name": "pos"
        }
      ],
      "name": "librespot_seek",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "u16",
          "name": "volume"
        }
      ],
      "name": "librespot_volume",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "scopes"
        }
      ],
      "name": "librespot_get_token",
      "ret": "types::errors::Result<librespot::spirc::ParsedToken>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "event"
        }
      ],
      "name": "register_event",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "uri"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_canvaz",
      "ret": "types::errors::Result<types::canvaz::CanvazResponse>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<Logger>",
          "name": "logger"
        },
        {
          "arg_type": "Vec<u8>",
          "name": "data"
        }
      ],
      "name": "renderer_write",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<lyrics::LyricsFetcher>",
          "name": "lyrics"
        },
        {
          "arg_type": "tauri::State<librespot::LibrespotHolder>",
          "name": "librespot"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "String",
          "name": "url"
        },
        {
          "arg_type": "Vec<String>",
          "name": "artists"
        },
        {
          "arg_type": "String",
          "name": "title"
        }
      ],
      "name": "get_lyrics",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mobile_player::MobilePlayer>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "src"
        },
        {
          "arg_type": "bool",
          "name": "autoplay"
        }
      ],
      "name": "mobile_load",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mobile_player::MobilePlayer>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "mobile_play",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mobile_player::MobilePlayer>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "mobile_pause",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mobile_player::MobilePlayer>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "mobile_stop",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mobile_player::MobilePlayer>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "f64",
          "name": "pos"
        }
      ],
      "name": "mobile_seek",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mpris::MprisHolder>",
          "name": "db"
        },
        {
          "arg_type": "types::mpris::MprisPlayerDetails",
          "name": "metadata"
        }
      ],
      "name": "set_metadata",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mpris::MprisHolder>",
          "name": "db"
        },
        {
          "arg_type": "types::ui::player_details::PlayerState",
          "name": "state"
        }
      ],
      "name": "set_playback_state",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<mpris::MprisHolder>",
          "name": "db"
        },
        {
          "arg_type": "f64",
          "name": "duration"
        }
      ],
      "name": "set_position",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "load_selective",
      "ret": "types::errors::Result<serde_json::Value>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "Option<serde_json::Value>",
          "name": "value"
        }
      ],
      "name": "save_selective",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "get_secure",
      "ret": "types::errors::Result<serde_json::Value>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "Option<serde_json::Value>",
          "name": "value"
        }
      ],
      "name": "set_secure",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        }
      ],
      "name": "load_selective_array",
      "ret": "types::errors::Result<serde_json::Value>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        }
      ],
      "name": "get_provider_keys",
      "ret": "types::errors::Result<Vec<String>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        }
      ],
      "name": "initialize_all_providers",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "account_id"
        }
      ],
      "name": "provider_login",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "account_id"
        }
      ],
      "name": "provider_signout",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "code"
        }
      ],
      "name": "provider_authorize",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "get_provider_key_by_id",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::providers::generic::Pagination",
          "name": "pagination"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "fetch_user_playlists",
      "ret": "types::errors::Result<(Vec<types::entities::QueryablePlaylist>, types::providers::generic::Pagination)>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::entities::QueryablePlaylist",
          "name": "playlist"
        },
        {
          "arg_type": "types::providers::generic::Pagination",
          "name": "pagination"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "fetch_playlist_content",
      "ret": "types::errors::Result<(Vec<types::songs::Song>, types::providers::generic::Pagination)>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::songs::Song",
          "name": "song"
        },
        {
          "arg_type": "String",
          "name": "player"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "fetch_playback_url",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "term"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "provider_search",
      "ret": "types::errors::Result<types::entities::SearchResult>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        }
      ],
      "name": "get_all_status",
      "ret": "types::errors::Result<std::collections::HashMap<String, types::providers::generic::ProviderStatus>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "url"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "playlist_from_url",
      "ret": "types::errors::Result<types::entities::QueryablePlaylist>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "url"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "song_from_url",
      "ret": "types::errors::Result<types::songs::Song>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "id"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_song_from_id",
      "ret": "types::errors::Result<types::songs::Song>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "url"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "match_url",
      "ret": "types::errors::Result<bool>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_suggestions",
      "ret": "types::errors::Result<Vec<types::songs::Song>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::entities::QueryableArtist",
          "name": "artist"
        },
        {
          "arg_type": "types::providers::generic::Pagination",
          "name": "pagination"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_artist_content",
      "ret": "types::errors::Result<(Vec<types::songs::Song>, types::providers::generic::Pagination)>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::entities::QueryableAlbum",
          "name": "album"
        },
        {
          "arg_type": "types::providers::generic::Pagination",
          "name": "pagination"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_album_content",
      "ret": "types::errors::Result<(Vec<types::songs::Song>, types::providers::generic::Pagination)>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::State<database::cache::CacheHolder>",
          "name": "cache"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::songs::Song",
          "name": "song"
        },
        {
          "arg_type": "bool",
          "name": "invalidate_cache"
        }
      ],
      "name": "get_provider_lyrics",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "Vec<types::songs::Song>",
          "name": "songs"
        }
      ],
      "name": "get_song_context_menu",
      "ret": "types::errors::Result<Vec<types::ui::extensions::ContextMenuReturnType>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "types::entities::QueryablePlaylist",
          "name": "playlist"
        }
      ],
      "name": "get_playlist_context_menu",
      "ret": "types::errors::Result<Vec<types::ui::extensions::ContextMenuReturnType>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::providers::handler::ProviderHandler>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "key"
        },
        {
          "arg_type": "String",
          "name": "action"
        }
      ],
      "name": "trigger_context_menu_action",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "src"
        }
      ],
      "name": "rodio_load",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        }
      ],
      "name": "rodio_play",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        }
      ],
      "name": "rodio_pause",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        }
      ],
      "name": "rodio_stop",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        },
        {
          "arg_type": "f64",
          "name": "pos"
        }
      ],
      "name": "rodio_seek",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        },
        {
          "arg_type": "f32",
          "name": "volume"
        }
      ],
      "name": "rodio_set_volume",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<rodio_player::RodioPlayer>",
          "name": "db"
        }
      ],
      "name": "rodio_get_volume",
      "ret": "types::errors::Result<f32>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "Option<Vec<String>>",
          "name": "paths"
        }
      ],
      "name": "start_scan",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "theme_handler"
        },
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "window_handler"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "export_theme",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "types::themes::ThemeDetails",
          "name": "theme"
        }
      ],
      "name": "save_theme",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "remove_theme",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "load_theme",
      "ret": "types::errors::Result<types::themes::ThemeDetails>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        }
      ],
      "name": "load_all_themes",
      "ret": "types::errors::Result<std::collections::HashMap<String, types::themes::ThemeDetails>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "path"
        }
      ],
      "name": "import_theme",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "id"
        }
      ],
      "name": "get_css",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        }
      ],
      "name": "get_themes_manifest",
      "ret": "types::errors::Result<std::collections::HashMap<String, types::themes::ThemeDetails>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<themes::themes::ThemeHolder>",
          "name": "db"
        },
        {
          "arg_type": "String",
          "name": "url"
        }
      ],
      "name": "download_theme",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "tauri::State<PendingUpdate>",
          "name": "pending_update"
        }
      ],
      "name": "fetch_update",
      "ret": "types::errors::Result<Option<types::ui::updater::UpdateMetadata>>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "tauri::State<PendingUpdate>",
          "name": "pending_update"
        }
      ],
      "name": "install_update",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "is_maximized",
      "ret": "types::errors::Result<bool>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        }
      ],
      "name": "has_frame",
      "ret": "types::errors::Result<bool>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "close_window",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        }
      ],
      "name": "get_platform",
      "ret": "types::errors::Result<String>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "maximize_window",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "minimize_window",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "tauri::State<preferences::preferences::PreferenceConfig>",
          "name": "preference"
        }
      ],
      "name": "update_zoom",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "String",
          "name": "url"
        }
      ],
      "name": "open_external",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "bool",
          "name": "is_main_window"
        }
      ],
      "name": "open_window",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "enable_fullscreen",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "disable_fullscreen",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::Window",
          "name": "window"
        }
      ],
      "name": "toggle_fullscreen",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::WebviewWindow",
          "name": "window"
        }
      ],
      "name": "toggle_dev_tools",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        }
      ],
      "name": "restart_app",
      "ret": "types::errors::Result<()>"
    },
    {
      "args": [
        {
          "arg_type": "tauri::State<crate::window::handler::WindowHandler>",
          "name": "db"
        },
        {
          "arg_type": "tauri::AppHandle",
          "name": "app"
        },
        {
          "arg_type": "bool",
          "name": "directory"
        },
        {
          "arg_type": "bool",
          "name": "multiple"
        },
        {
          "arg_type": "Vec<types::window::DialogFilter>",
          "name": "filters"
        }
      ],
      "name": "open_file_browser",
      "ret": "types::errors::Result<Vec<types::window::FileResponse>>"
    }
  ]
}